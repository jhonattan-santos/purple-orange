-- ~/.config/nvim/lua/purple_orange/theme.lua
-- Purple Orange theme for Neovim using lush.nvim
-- Generated from VS Code theme JSON

local lush = require('lush')
local hsl = lush.hsl

local palette = {
  bg        = hsl("#101211"),
  fg        = hsl("#ffd654"),
  border    = hsl("#1F2A23"),
  purple    = hsl("#945AFF"),
  purple2   = hsl("#9968FC"),
  purple3   = hsl("#b596ff"),
  magenta   = hsl("#E648E6"),
  pink      = hsl("#FF97FF"),
  orange    = hsl("#ffb300"),
  orange2   = hsl("#EA8E4E"),
  yellow    = hsl("#ffd654"),
  yellow2   = hsl("#BA672E"),
  blue      = hsl("#56A7FB"),
  blue2     = hsl("#9968FC"),
  cyan      = hsl("#3F9C94"),
  cyan2     = hsl("#ACF2EC"),
  green     = hsl("#8DC361"),
  green2    = hsl("#C9EEAC"),
  green3    = hsl("#24C916"),
  comment   = hsl("#496250"),
  error     = hsl("#FF6268"),
  warning   = hsl("#FF9640"),
  info      = hsl("#56A7FB"),
  hint      = hsl("#24C916"),
  selection = hsl("#60402F"),
  selection2= hsl("#945AFF"),
  sidebar   = hsl("#101211"),
  sidebar2  = hsl("#101812"),
  sidebar3  = hsl("#282F1E"),
  badge     = hsl("#945AFF"),
  badge_fg  = hsl("#ffd654"),
  tab_bg    = hsl("#101812"),
  tab_fg    = hsl("#ffd654"),
  tab_inactive_fg = hsl("#496250"),
  tab_inactive_bg = hsl("#101211"),
  tab_border = hsl("#1F2A23"),
  tab_sel_bg = hsl("#2B1F19"),
  tab_sel_fg = hsl("#ffd654"),
  pmenu_bg  = hsl("#282F1E"),
  pmenu_fg  = hsl("#ffd654"),
  pmenu_sel = hsl("#945AFF"),
  pmenu_thumb = hsl("#945AFF"),
  pmenu_sbar = hsl("#282F1E"),
  pmenu_border = hsl("#1F2A23"),
  linenr    = hsl("#496250"),
  linenr_active = hsl("#ffb300"),
  diff_add  = hsl("#56A7FB40"),
  diff_change = hsl("#56A7FB20"),
  diff_delete = hsl("#FF626840"),
  diff_text = hsl("#945AFF70"),
}

local theme = lush(function()
  return {
    Normal       { fg = palette.fg, bg = palette.bg },
    CursorLine   { bg = palette.bg.lighten(3) },
    CursorColumn { bg = palette.bg.lighten(3) },
    LineNr       { fg = palette.linenr, bg = palette.bg },
    CursorLineNr { fg = palette.linenr_active, bold = true },
    Visual       { bg = palette.selection },
    Search       { bg = palette.purple, fg = palette.bg },
    IncSearch    { bg = palette.orange, fg = palette.bg },
    VertSplit    { fg = palette.border },
    StatusLine   { fg = palette.fg, bg = palette.purple },
    StatusLineNC { fg = palette.comment, bg = palette.bg },
    Pmenu        { fg = palette.pmenu_fg, bg = palette.pmenu_bg },
    PmenuSel     { fg = palette.fg, bg = palette.pmenu_sel },
    PmenuSbar    { bg = palette.pmenu_sbar },
    PmenuThumb   { bg = palette.pmenu_thumb },
    TabLine      { fg = palette.tab_inactive_fg, bg = palette.tab_inactive_bg },
    TabLineSel   { fg = palette.tab_sel_fg, bg = palette.tab_sel_bg },
    TabLineFill  { bg = palette.bg },
    Comment      { fg = palette.comment, gui = "italic" },
    Constant     { fg = hsl("#00ff4d") },
    String       { fg = palette.orange },
    Character    { fg = hsl("#00ff4d") },
    Number       { fg = hsl("#00ff4d") },
    Boolean      { fg = hsl("#00ff4d") },
    Float        { fg = hsl("#00ff4d") },
    Identifier   { fg = hsl("#c655ff") },
    Function     { fg = palette.orange },
    Statement    { fg = palette.purple },
    Conditional  { fg = hsl("#A077FF") },
    Repeat       { fg = hsl("#DD8FFF") },
    Label        { fg = palette.purple },
    Operator     { fg = hsl("#00ff51") },
    Keyword      { fg = hsl("#A077FF") },
    Exception    { fg = palette.error },
    PreProc      { fg = palette.purple },
    Include      { fg = hsl("#C698F0") },
    Define       { fg = palette.purple },
    Macro        { fg = palette.purple },
    Type         { fg = hsl("#BB9EFF") },
    StorageClass { fg = palette.purple },
    Structure    { fg = hsl("#DA8AFF") },
    Typedef      { fg = hsl("#DA8AFF") },
    Special      { fg = hsl("#ff8500") },
    SpecialComment{ fg = hsl("#bfa4ff") },
    Underlined   { fg = palette.blue, gui = "underline" },
    Todo         { fg = palette.orange, gui = "bold" },
    Error        { fg = palette.error, bg = palette.bg.darken(10), gui = "bold" },
    WarningMsg   { fg = palette.warning, gui = "bold" },
    DiagnosticError { fg = palette.error },
    DiagnosticWarn  { fg = palette.warning },
    DiagnosticInfo  { fg = palette.info },
    DiagnosticHint  { fg = palette.hint },
    DiffAdd      { bg = palette.diff_add },
    DiffChange   { bg = palette.diff_change },
    DiffDelete   { bg = palette.diff_delete },
    DiffText     { bg = palette.diff_text },
    GitSignsAdd    { fg = palette.green3 },
    GitSignsChange { fg = palette.blue },
    GitSignsDelete { fg = palette.error },
    -- Treesitter
    ['@variable']      { fg = hsl("#c655ff") },
    ['@function']      { fg = palette.orange },
    ['@keyword']       { fg = hsl("#A077FF") },
    ['@string']        { fg = palette.orange },
    ['@comment']       { fg = palette.comment, gui = "italic" },
    ['@type']          { fg = hsl("#BB9EFF") },
    ['@constant']      { fg = hsl("#00ff4d") },
    ['@number']        { fg = hsl("#00ff4d") },
    ['@boolean']       { fg = hsl("#00ff4d") },
    ['@operator']      { fg = hsl("#00ff51") },
    ['@property']      { fg = hsl("#EDAFF8") },
    -- UI Elements
    Title         { fg = palette.fg, bg = palette.bg, gui = "bold" },
    Directory     { fg = palette.purple },
    SpecialKey    { fg = palette.orange },
    MatchParen    { fg = palette.orange, bg = palette.bg.lighten(10), gui = "bold" },
    -- Terminal colors (for truecolor terminals)
    -- You can set these in your init.lua as well
  }
end)

return theme
